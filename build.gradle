plugins {
    id "fabric-loom" version "1.4-SNAPSHOT"
    id "maven-publish"
    id "me.modmuss50.mod-publish-plugin" version "0.4.+"
    id "org.jetbrains.kotlin.jvm" version "${kotlin_version}"
}

archivesBaseName = property("mod.name")
version = "${property("mod.version")}+${stonecutter.current().version()}"
group = property("mod.maven_group")

base {
    archivesName = archivesBaseName
}

repositories {
    maven { url = "https://jitpack.io" }
    exclusiveContent {
        forRepository {
            maven {
                name = "Curseforge"
                url = "https://www.cursemaven.com"
            }
        }
        filter {
            includeGroup "curse.maven"
        }
    }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        name = "TerraformersMC"
        url "https://maven.terraformersmc.com/releases/"
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${stonecutter.current().version()}"
    mappings "net.fabricmc:yarn:${property("deps.yarn")}:v2"
    modImplementation "net.fabricmc:fabric-loader:${property("deps.fabric_loader")}"
    modImplementation("net.fabricmc:fabric-language-kotlin:${property("deps.flk")}+kotlin.${kotlin_version}")
    modImplementation "net.fabricmc.fabric-api:fabric-api:${property("deps.fabric_api")}"

    modApi "com.terraformersmc:modmenu:${property("deps.modmenu")}"
}

def target = ">=${project.property("mod.min_target")}- <=${project.property("mod.max_target")}"

processResources {
    filesMatching("fabric.mod.json") {
        expand "id": archivesBaseName,
                "display": project.property("mod.display"),
                "mod_version": version,
                "target_minecraft": target,
                "flk": project.property("deps.flk"),
                "modrinth": project.property("publish.modrinth")
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
}

tasks.withType(AbstractArchiveTask).configureEach {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

java {
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}" }
    }
}

// configure the maven publication
publishing {
    repositories {
        maven {
            name = "kikugieMaven"
            url = "https://maven.kikugie.dev/releases"
            credentials(PasswordCredentials)
            authentication {
                basic(BasicAuthentication)
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            groupId = "${group}.${archivesBaseName}"
            artifactId = property("mod.version")
            version = stonecutter.current().version()

            from components.java
        }
    }
}

// Create a task to collect the completed jars in the root project"s build/libs folder.
def collectJars = tasks.register("collectJars", Copy) { copy ->

    def task = tasks.named("remapJar")

    dependsOn(task)

    copy.from task
    copy.into rootProject.buildDir.path + "/libs"
}

// Set up assemble to depend on the collectJars task, so it gets run on build.
assemble {
    dependsOn(collectJars)
}

if (stonecutter.current().isActiveVersion()) {
    loom {
        runConfigs.client {
            ideConfigGenerated = true
            vmArgs "-Dmixin.debug.export=true"
            runDir "../../run"
        }
    }

    rootProject.tasks.register("buildActive") {
        setGroup "project"

        dependsOn tasks.named("build")
    }
}

publishMods {
    file = remapJar.archiveFile
    additionalFiles.from(remapSourcesJar.archiveFile)
    displayName = "${project.property("mod.display")} ${project.property("mod.version")} for ${stonecutter.current().version()}"
    version = project.version
    changelog = getRootProject().file("CHANGELOG.md").text
    type = STABLE
    modLoaders.add("fabric")

    dryRun = providers.environmentVariable("MODRINTH_TOKEN").getOrNull() == null || providers.environmentVariable("GITHUB_TOKEN").getOrNull() == null

    modrinth {
        projectId = project.property("publish.modrinth")
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")

        def min = project.property("mod.min_target")
        def max = project.property("mod.max_target")

        if (min == max) {
            minecraftVersions.add(min)
        } else {
            minecraftVersionRange {
                start = min
                end = max
            }
        }

        requires {
            slug = "fabric-api"
        }
    }
}